- set_xml and set_stylesheet

- my $transformed = $xps->transform( [ $xml, [ $stylesheet, [ \@args ] 
]  ] )

- be able to do xml => XML::LibXML object

- set_stylesheet_args( qw/ $foo $bar  / )

- Documentation of XML::XPS -> put at the end

- Mention the stylesheet arguments ( @_ or named )

* Investigate ties to Toolkit::Template and Embperl

* Add requires

* Add license in pods

* add SVN tags on files

* INCLUDEs for A::A::YPS -> which directory is home?
	ONLINE
		plain vanila -> URL
		prefixed with SRC_DIR
		prefixed with SS_DIR

* documentation everywhere

* XML::XPath::..:Document -- must revisit; Add back document() to A::A::L::XPS

* Explain test() and the return code 

* configurable interpolation pattern

$current->interpolation_regex( qq/\[\[(.*)\]\]/ )

* It would be quite easy to come
	up with a variation of XPS that output a DOM tree rather than
	text. It wouldn't be as flexible as classic XPS, but it would probably
	be a little more zippy for long transformation chains

* Would it be a good idea to allow '$t->{foo}{testcode} = DO_SELF_ONLY;' ?

* Do a Makefile-like mode where the same document can be transformed by different stylesheets
	and produce different end documents.

document.xml:
	xml2html.xps	=>	document.html

html

<xpsMakefile>
<document>document.xml</document>
<output id='html'>
	<name>document.html</name>
	<transformation type='xps'>xml2html.xps</transformation>
</output>
<output id='pdf'>
	<name>document.pdf</name>
	<transformation type='xps'>xml2latex.xps</transformation>
	<transformation type='blah'>latex2pdf.pl</transformation>
</output>
<xpsMakefile/>


* Change DO_CHILD with $DO_CHILD (ReadOnly)

* doc, doc, doc

* Remove VERSION on all but XML::XPathScript

* Build.PL

* Module::Signature
