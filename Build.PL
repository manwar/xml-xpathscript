# Note: this file has been initially generated by Module::Build::Convert 0.25

use strict;
use warnings;
use Getopt::Long;




my $XML_parser;
GetOptions( 'parser=s' => \$XML_parser );

if( $XML_parser )
{
	unless( grep $XML_parser eq $_, qw/ XML::XPath XML::LibXML / )
	{
		die "XML parser $XML_parser not supported\nplease choose XML::XPath or XML::LibXML\n";
	}
	
	print "XML parser configured to be $XML_parser\n";
	
}
else
{	
	print "detecting XML parser...\n";
	
	
	print "checking if XML::LibXML is present.. ";
	eval "use XML::LibXML";
	unless( $@ )
	{ 
		print "XML::LibXML detected, good!\nsetting XML parser to XML::LibXML\n";
		$XML_parser = 'XML::LibXML';
	}
	else
	{
		print "XML::LibXML not detected, drat\n";
		print "checking if XML::XPath is present.. ";
		eval "use XML::XPath";
		unless( $@ )
		{
			print "XML::XPath detected\nsetting XML parser to XML::XPath\n";
			$XML_parser = 'XML::XPath';
		}
		else
		{
			print "XML::XPath not found\n";
			die "XML::XPathScript needs either XML::LibXML or XML::XPath to be installed\n";
		}
	}
}

open YPS, "XPathScript.pm" or die "can't open XPathScript.pm: $!\n";
my $module;
while( <YPS> )
{
	$module .= $_;
}
open YPS, ">XPathScript.pm" or die "can't overwrite XPathScript.pm: $!\n";
print YPS $module;
close YPS;

my @pmlibdirs = ( 'lib', '$(BASEEXT)' );

eval "use AxKit";
unless( $@ ) {
	print "AxKit detected, adding Apache::Axkit::Language::YPathScript to installation\n";
	push @pmlibdirs, 'lib_axkit';
}


eval "use Apache2::TomKit";

use Module::Build;

unless( $@ ) {
	print "TomKit detected, adding Apache2::TomKit::Processor::XPathScript to installation\n";
	push @pmlibdirs, 'lib_tomkit';	
}

my $build = Module::Build->new
  (
   module_name => 'XML::XPathScript',
   dist_author => 'Dominique Quatravaux <dom@idealx.com> and Yanick Champoux <yanick@babyl.dyndns.org>',
   ,
   dist_version_from => 'XPathScript.pm',
   license => 'unknown',
   create_readme => 1,
   create_makefile_pl => 'traditional',
  );
  
$build->create_build_script;
