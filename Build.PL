# Note: this file has been initially generated by Module::Build::Convert 0.25

use strict;
use warnings;
use Module::Build;
use Getopt::Long;

my $XML_parser;
GetOptions( 'parser=s' => \$XML_parser );

$XML_parser = choose_parser( $XML_parser );

my $with_axkit = eval 'use AxKit; 1' || 0;
print 'AxKit ', 'not 'x!$with_axkit, "detected\n";
print "\tadding Apache::Axkit::Language::YPathScript to installation\n"
	if $with_axkit;

my $with_tomkit = eval 'use Apache2::TomKit; 1' || 0;
print 'TomKit ', 'not 'x!$with_tomkit, "detected\n";
print "\tadding Apache2::Tomkit::Processor::XPathScript to installation\n"
	if $with_tomkit;

my $class = Module::Build->subclass
    (code => <<"PROPAGATE_VARIABLES"
our \$XML_parser = '$XML_parser';
our \$with_axkit = '$with_axkit';
our \$with_tomkit = '$with_tomkit';
PROPAGATE_VARIABLES
     . <<'CODE');
use strict;
use warnings;

use File::Find;
use File::Spec ();

sub find_pm_files {
    my $self = shift;
    my $result = $self->SUPER::find_pm_files(@_);
    my @extra_lib_dirs;
    push @extra_lib_dirs, "lib_axkit" if $with_axkit;
    push @extra_lib_dirs, "lib_tomkit" if $with_tomkit;
    return $result ;
    find ({ no_chdir => 1,
            wanted => sub {
                $result->{$File::Find::name} = $File::Find::name
                     if m/\.pm$/ },
            }, @extra_lib_dirs) if @extra_lib_dirs;
    return $result;
}

sub process_pm_files {
    my $self = shift;
    $self->SUPER::process_pm_files(@_);

    my $outfile = File::Spec->catfile(qw(blib lib XML XPathScript.pm));
    unlink($outfile);
    my $in = new IO::File("XPathScript.pm", "<") or die "$!";
    my $out = new IO::File($outfile, ">") or die "$!";
    while(<$in>) {
          s/^(\$XML_parser = )'.*?';$/$1'$XML_parser';/;
          $out->print($_);
      }
}

CODE

my $build = $class->new
  (
   module_name => 'XML::XPathScript',
   dist_author => 'Yanick Champoux <yanick@cpan.org>, '
                    .'Dominique Quatravaux <dom@idealx.com> '
                    .'and Matt Sergeant <matt@sergeant.org>',
   dist_version_from => 'XPathScript.pm',
   license => 'artistic',
   requires => {
                $XML_parser 	 => 0,
                'Carp' 			 => 0,
                'Symbol' 		 => 0,
                'File::Basename' => 0,
                'IO::File' 	 	 => 0,
                'Data::Dumper'   => 0,
                'Scalar::Util'   => 0,
               },
   build_requires => {
                      "File::Find" => 0,
                      "File::Spec" => 0,
                     },
   create_makefile_pl => 'passthrough',
  );

$build->create_build_script;

sub choose_parser {
	my( $XML_parser ) = @_;

	if( $XML_parser ) {
		unless( grep $XML_parser eq $_, qw/ XML::XPath XML::LibXML / ) {
			die "XML parser $XML_parser not supported\n",
				"please choose XML::XPath or XML::LibXML\n";
		}
	
		print "XML parser configured to be $XML_parser\n";

		return $XML_parser;
	}

	print "detecting XML parser...\n";

	print "checking if XML::LibXML is present.. ";
	if ( $XML_parser = eval "use XML::LibXML; 'XML::LibXML'" ) { 
		print "XML::LibXML detected, good!\n",
              "setting XML parser to XML::LibXML\n";
		return $XML_parser;
	}
	print "XML::LibXML not detected, drat\n";

	print "checking if XML::XPath is present.. ";
	if ( $XML_parser = eval "use XML::XPath; 'XML::XPath'" ) {
		print "XML::XPath detected\nsetting XML parser to XML::XPath\n";

		return $XML_parser;
	}
	print "XML::XPath not found\n";

	die "XML::XPathScript needs either XML::LibXML or ",
		"XML::XPath to be installed\n";
}
